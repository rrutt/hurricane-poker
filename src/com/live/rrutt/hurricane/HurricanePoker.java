package com.live.rrutt.hurricane;

import com.live.rrutt.tuprolog.lib.PrologPredicatesAndFunctors;
import com.live.rrutt.tuprolog.util.*;

import alice.tuprolog.*;
import alice.tuprolog.event.*;

import java.io.*;

public class HurricanePoker 
		extends javax.swing.JFrame 
		implements Serializable, OutputListener, SpyListener {
	
    public Prolog engine;

	private static final long serialVersionUID = 2785996048582414206L;

	private static String TheoryResourceName = "com/live/rrutt/hurricane/HurricanePoker.pl";
	
	private String theoryFilePath = null;

	private javax.swing.JScrollPane outputScrollPane;

	private javax.swing.JTextArea outputArea;

	public HurricanePoker(String[] args) {
		System.out.println(
				"Rick Rutt's Hurricane Poker - Using the tuProlog system "
				+ Prolog.getVersion()
				);
		
		for (String arg : args) {
			if ((arg.length() > 1) && (arg.charAt(0) == '-')) {
				if (arg.equalsIgnoreCase("-peek")) {
					PrologPredicatesAndFunctors.enablePeeking = true;
					System.out.println("Peek output enabled.");
				} else if (arg.equalsIgnoreCase("-spy")) {
					PrologPredicatesAndFunctors.enableSpying = true;
					System.out.println("Spy output enabled.");
				} else {
					System.out.println("Unknown command argument ignored: " + arg);
				}
			} else {
				theoryFilePath = arg;
				System.out.println("Processing theory file: " + arg);
			}
		}
		
		initComponents();
		pack();
		setBounds(0, 350, 450, 250);
		engine = new Prolog();
		try {
			engine.loadLibrary("com.live.rrutt.tuprolog.lib.PrologPredicatesAndFunctors");
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		engine.addOutputListener(this);
		engine.addSpyListener(this);
		engine.setSpy(PrologPredicatesAndFunctors.enableSpying);

		setVisible(true);

		try {
			InputStream theoryInputStream = null;
			Theory t = null;
			if (theoryFilePath != null) {
				theoryInputStream = new FileInputStream(theoryFilePath);
				t = new Theory(theoryInputStream);
			} else {
				ClassLoader cl = getClass().getClassLoader();
				if (cl == null) {
					throw new Exception("Could not get ClassLoader");
				}

				theoryInputStream = cl.getResourceAsStream(TheoryResourceName);
				if (theoryInputStream == null) {
					throw new Exception("Could not load theory resource: "
							+ TheoryResourceName);
				}

				InputStreamReader isr = new InputStreamReader(theoryInputStream, "UTF-8");
				BufferedReader br = new BufferedReader(isr);
				StringBuffer theoryBuffer = new StringBuffer();

				String s = br.readLine();
				while (s != null) {
					// System.out.println(s);
					theoryBuffer.append(s);
					theoryBuffer.append('\n');

					s = br.readLine();
				}

				String theoryString = theoryBuffer.toString();
				t = new Theory(theoryString);
//				t = new Theory(theoryInputStream);
			}
			engine.setTheory(t);
			SolveInfo info = engine.solve("x.");
//			System.out.print(info);
		} catch (Exception e) {
			e.printStackTrace();
		}

		exitForm(null);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the FormEditor.
	 */
	protected void initComponents() {
		outputScrollPane = new javax.swing.JScrollPane();
		outputArea = new javax.swing.JTextArea();
		getContentPane().setLayout(new java.awt.GridBagLayout());
		java.awt.GridBagConstraints gridBagConstraints1;
		setTitle("Welcome to the Poker Table");

		outputScrollPane.setPreferredSize(new java.awt.Dimension(150, 200));
		outputScrollPane.setFont(new java.awt.Font("Courier New", 0, 12));
		outputScrollPane.setAutoscrolls(true);

		outputArea.setColumns(1);
		outputArea.setRows(1);
		outputArea.setFont(new java.awt.Font("Courier New", 0, 12));
		outputScrollPane.setViewportView(outputArea);

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 0;
		gridBagConstraints1.gridy = 0;
		gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints1.weightx = 100.0;
		gridBagConstraints1.weighty = 95.0;
		getContentPane().add(outputScrollPane, gridBagConstraints1);

		addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent evt) {
				exitForm(evt);
			}
		});
	}

	protected void exitForm(java.awt.event.WindowEvent evt) {
		PrologPredicatesAndFunctors.disposeTextWindow();
				
		this.setVisible(false);
		this.dispose();
		try {
			// Assume we are running as an application.
			System.exit(0);
		} catch (Exception ex) {
			outputArea.append("\n\nApplet finished.\n\nRefresh browser to restart\nor close browser page to exit.\n");
			// Probably running as an applet, so do nothing.
		}
	}

	public void onOutput(OutputEvent ev) {
		String s = Utilities.stripQuotes(ev.getMsg());
		outputArea.append(s);
		outputArea.setCaretPosition(outputArea.getText().length());
	}

	public void onSpy(SpyEvent ev) {
		String s = Utilities.stripQuotes(ev.getMsg());
		System.out.print(" {Spy: ");
		System.out.print(s);
		System.out.print("}\n");
	}

	public static void main(String args[]) {
		new HurricanePoker(args).setVisible(true);
	}
}
